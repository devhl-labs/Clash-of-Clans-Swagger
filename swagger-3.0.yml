openapi: 3.0.1
info:
  title: Clash of Clans API
  description: |
    Check out <a href="https://developer.clashofclans.com/#/getting-started" target="_parent">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href="https://jwt.io/" target="_blank">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href="https://developer.clashofclans.com/#/account" target="_parent">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: "Authorization: Bearer API_TOKEN".
  termsOfService: http://supercell.com/en/terms-of-service/
  version: v1
servers:
- url: https://api.clashofclans.com/v1
- url: http://api.clashofclans.com/v1
security:
- JWT: []
tags:
- name: clans
  description: Access clan specific information
- name: players
  description: Access player specific information
- name: leagues
  description: Access league information
- name: locations
  description: Access global and local rankings
- name: goldpass
  description: Access information about gold pass
- name: esports
  description: Esports related APIs
- name: developer
paths:
  /capitalleagues:
    get:
      summary: List capital leagues
      description: List capital leagues
      operationId: getCapitalLeagues
      tags:
      - leagues
      parameters:
      - name: limit
        in: query
        description: Limit the number of items returned in the response.
        required: false
        schema:
          type: integer
      - name: after
        in: query
        description: |
          Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        required: false
        schema:
          type: string
      - name: before
        in: query
        description: |
          Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        required: false
        schema:
          type: string
      responses:
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CapitalLeagueObject'
  /capitalleagues/{leagueId}:
    get:
      summary: Get capital league information
      description: Get capital league information
      operationId: getCapitalLeague
      tags:
      - leagues
      parameters:
      - name: leagueId
        in: path
        description: Identifier of the league.
        required: true
        schema:
          type: string
      responses:
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CapitalLeague'
  /locations/{locationId}/rankings/capitals:
    get:
      summary: Get capital rankings for a specific location
      description: Get capital rankings for a specific location
      operationId: getClanCapitalRanking
      tags:
      - locations
      parameters:
      - name: locationId
        in: path
        description: Identifier of the location to retrieve.
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Limit the number of items returned in the response.
        required: false
        schema:
          type: integer
      - name: after
        in: query
        description: |
          Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        required: false
        schema:
          type: string
      - name: before
        in: query
        description: |
          Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        required: false
        schema:
          type: string
      responses:
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClanCapitalRankingObject'
  /clans/{clanTag}/currentwar:
    get:
      tags:
      - clans
      summary: Retrieve information about clan's current clan war
      description: Retrieve information about clan's current clan war
      operationId: getCurrentWar
      parameters:
      - name: clanTag
        in: path
        description: Tag of the clan.
        required: true
        schema:
          type: string
      - name: realtime
        in: query
        description: Used to bypass cache. Only SuperCell approved users may use this option.
        required: false
        schema:
          type: boolean
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClanWar'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /clans/{clanTag}/currentwar/leaguegroup:
    get:
      tags:
      - clans
      summary: Retrieve information about clan's current clan war league group
      description: Retrieve information about clan's current clan war league group
      operationId: getClanWarLeagueGroup
      parameters:
      - name: clanTag
        in: path
        description: Tag of the clan.
        required: true
        schema:
          type: string
      - name: realtime
        in: query
        description: Used to bypass cache. Only SuperCell approved users may use this option.
        required: false
        schema:
          type: boolean
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClanWarLeagueGroup'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /clans/{clanTag}:
    get:
      tags:
      - clans
      summary: Get clan information
      description: |
        Get information about a single clan by clan tag. Clan tags can be found using clan search operation. Note that clan tags start with hash character '#' and that needs to be URL-encoded properly to work in URL, so for example clan tag '#2ABC' would become '%232ABC' in the URL.
      operationId: getClan
      parameters:
      - name: clanTag
        in: path
        description: Tag of the clan.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clan'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /clans/{clanTag}/capitalraidseasons:
      get:
        tags:
        - clans
        summary: Retrieve clan's capital raid seasons
        description: Retrieve clan's capital raid seasons
        operationId: getCapitalRaidSeasons
        parameters:
        - name: clanTag
          in: path
          description: Tag of the clan.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the number of items returned in the response.
          schema:
            type: integer
        - name: after
          in: query
          description: |
            Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
          schema:
            type: string
        - name: before
          in: query
          description: |
            Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
          schema:
            type: string
        responses:
          200:
            description: Successful response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ClanCapitalRaidSeasons'
          400:
            $ref: '#/components/responses/BadRequestSpec'
          403:
            $ref: '#/components/responses/ForbiddenSpec'
          404:
            $ref: '#/components/responses/NotFoundSpec'
          429:
            $ref: '#/components/responses/RequestThrottledSpec'
          500:
            $ref: '#/components/responses/UnknownExceptionSpec'
          503:
            $ref: '#/components/responses/InMaintenanceSpec'
  /players/{playerTag}/verifytoken:
    post:
      tags:
      - players
      summary: Verify player API token that can be found from the game settings.
      description: |
        Verify player API token that can be found from the game settings. This API call can be used to check that players own the game accounts they claim to own as they need to provide the one-time use API token that exists inside the game.
      operationId: verifyToken
      parameters:
      - name: playerTag
        in: path
        description: Tag of the player.
        required: true
        schema:
          type: string
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyTokenRequest'
        required: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyTokenResponse'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
      x-codegen-request-body-name: body
  /players/{playerTag}:
    get:
      tags:
      - players
      summary: Get player information
      description: |
        Get information about a single player by player tag. Player tags can be found either in game or by from clan member lists. Note that player tags start with hash character '#' and that needs to be URL-encoded properly to work in URL, so for example player tag '#2ABC' would become '%232ABC' in the URL.
      operationId: getPlayer
      parameters:
      - name: playerTag
        in: path
        description: Tag of the player.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /builderbaseleagues/{leagueId}:
    get:
      tags:
      - leagues
      summary: Get Builder Base league information
      description: Get Builder Base league information
      operationId: getBuilderBaseLeague
      parameters:
      - name: leagueId
        in: path
        description: Identifier of the league.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuilderBaseLeague'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /locations/{locationId}/rankings/players-builder-base:
    get:
      tags:
      - locations
      summary: Get player versus rankings for a specific location
      description: Get player versus rankings for a specific location
      operationId: getPlayerBuilderBaseRanking
      parameters:
      - name: locationId
        in: path
        description: Identifier of the location to retrieve.
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Limit the number of items returned in the response.
        schema:
          type: integer
      - name: after
        in: query
        description: |
          Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      - name: before
        in: query
        description: |
          Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerBuilderBaseRankingList'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /locations/{locationId}/rankings/clans:
    get:
      tags:
      - locations
      summary: Get clan rankings for a specific location
      description: Get clan rankings for a specific location
      operationId: getClanRanking
      parameters:
      - name: locationId
        in: path
        description: Identifier of the location to retrieve.
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Limit the number of items returned in the response.
        schema:
          type: integer
      - name: after
        in: query
        description: |
          Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      - name: before
        in: query
        description: |
          Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClanRankingList'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /clanwarleagues/wars/{warTag}:
    get:
      tags:
      - clans
      summary: Retrieve information about individual clan war league war
      description: Retrieve information about individual clan war league war
      operationId: getClanWarLeagueWar
      parameters:
      - name: warTag
        in: path
        description: Tag of the war.
        required: true
        schema:
          type: string
      - name: realtime
        in: query
        description: Used to bypass cache. Only SuperCell approved users may use this option.
        required: false
        schema:
          type: boolean
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClanWar'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /builderbaseleagues:
    get:
      tags:
      - leagues
      summary: List Builder Base leagues
      description: List Builder Base leagues
      operationId: getBuilderBaseLeagues
      parameters:
      - name: limit
        in: query
        description: Limit the number of items returned in the response.
        schema:
          type: integer
      - name: after
        in: query
        description: |
          Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      - name: before
        in: query
        description: |
          Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuilderBaseLeagueList'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /leagues/{leagueId}:
    get:
      tags:
      - leagues
      summary: Get league information
      description: Get league information
      operationId: getLeague
      parameters:
      - name: leagueId
        in: path
        description: Identifier of the league.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/League'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /goldpass/seasons/current:
    get:
      tags:
      - goldpass
      summary: Get information about the current gold pass season.
      description: Get information about the current gold pass season.
      operationId: getCurrentGoldPassSeason
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoldPassSeason'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /clans/{clanTag}/warlog:
    get:
      tags:
      - clans
      summary: Retrieve clan's clan war log
      description: Retrieve clan's clan war log
      operationId: getClanWarLog
      parameters:
      - name: clanTag
        in: path
        description: Tag of the clan.
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Limit the number of items returned in the response.
        schema:
          type: integer
      - name: after
        in: query
        description: |
          Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      - name: before
        in: query
        description: |
          Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClanWarLog'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /leagues:
    get:
      tags:
      - leagues
      summary: List leagues
      description: List leagues
      operationId: getLeagues
      parameters:
      - name: limit
        in: query
        description: Limit the number of items returned in the response.
        schema:
          type: integer
      - name: after
        in: query
        description: |
          Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      - name: before
        in: query
        description: |
          Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeagueList'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /leagues/{leagueId}/seasons:
    get:
      tags:
      - leagues
      summary: Get league seasons
      description: |
        Get league seasons. Note that league season information is available only for Legend League.
      operationId: getLeagueSeasons
      parameters:
      - name: leagueId
        in: path
        description: Identifier of the league.
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Limit the number of items returned in the response.
        schema:
          type: integer
      - name: after
        in: query
        description: |
          Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      - name: before
        in: query
        description: |
          Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeagueSeasonList'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /locations/{locationId}/rankings/players:
    get:
      tags:
      - locations
      summary: Get player rankings for a specific location
      description: Get player rankings for a specific location
      operationId: getPlayerRanking
      parameters:
      - name: locationId
        in: path
        description: Identifier of the location to retrieve.
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Limit the number of items returned in the response.
        schema:
          type: integer
      - name: after
        in: query
        description: |
          Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      - name: before
        in: query
        description: |
          Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerRankingList'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /clans/{clanTag}/members:
    get:
      tags:
      - clans
      summary: List clan members
      description: List clan members.
      operationId: getClanMembers
      parameters:
      - name: clanTag
        in: path
        description: Tag of the clan.
        required: true
        schema:
          type: string
          nullable: false
      - name: limit
        in: query
        description: Limit the number of items returned in the response.
        schema:
          type: integer
      - name: after
        in: query
        description: |
          Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      - name: before
        in: query
        description: |
          Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClanMemberList'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /locations:
    get:
      tags:
      - locations
      summary: List locations
      description: List locations
      operationId: getLocations
      parameters:
      - name: limit
        in: query
        description: Limit the number of items returned in the response.
        schema:
          type: integer
      - name: after
        in: query
        description: |
          Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      - name: before
        in: query
        description: |
          Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationList'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /labels/players:
    get:
      tags:
      - labels
      summary: List player labels
      description: List player labels
      operationId: getPlayerLabels
      parameters:
      - name: limit
        in: query
        description: Limit the number of items returned in the response.
        schema:
          type: integer
      - name: after
        in: query
        description: |
          Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      - name: before
        in: query
        description: |
          Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelsObject'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /warleagues/{leagueId}:
    get:
      tags:
      - leagues
      summary: Get war league information
      description: Get war league information
      operationId: getWarLeague
      parameters:
      - name: leagueId
        in: path
        description: Identifier of the league.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarLeague'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /leagues/{leagueId}/seasons/{seasonId}:
    get:
      tags:
      - leagues
      summary: Get league season rankings
      description: |
        Get league season rankings. Note that league season information is available only for Legend League.
      operationId: getLeagueSeasonRankings
      parameters:
      - name: leagueId
        in: path
        description: Identifier of the league.
        required: true
        schema:
          type: string
      - name: seasonId
        in: path
        description: Identifier of the season.
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Limit the number of items returned in the response.
        schema:
          type: integer
      - name: after
        in: query
        description: |
          Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      - name: before
        in: query
        description: |
          Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerRankingList'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /locations/{locationId}:
    get:
      tags:
      - locations
      summary: Get location information
      description: Get information about specific location
      operationId: getLocation
      parameters:
      - name: locationId
        in: path
        description: Identifier of the location to retrieve.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /locations/{locationId}/rankings/clans-builder-base:
    get:
      tags:
      - locations
      summary: Get clan versus rankings for a specific location
      description: Get clan versus rankings for a specific location
      operationId: getClanBuilderBaseRanking
      parameters:
      - name: locationId
        in: path
        description: Identifier of the location to retrieve.
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Limit the number of items returned in the response.
        schema:
          type: integer
      - name: after
        in: query
        description: |
          Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      - name: before
        in: query
        description: |
          Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClanBuilderBaseRankingList'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /labels/clans:
    get:
      tags:
      - labels
      summary: List clan labels
      description: List clan labels
      operationId: getClanLabels
      parameters:
      - name: limit
        in: query
        description: Limit the number of items returned in the response.
        schema:
          type: integer
      - name: after
        in: query
        description: |
          Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      - name: before
        in: query
        description: |
          Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelsObject'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /clans:
    get:
      tags:
      - clans
      summary: Search clans
      description: |
        Search all clans by name and/or filtering the results using various criteria. At least one filtering criteria must be defined and if name is used as part of search, it is required to be at least three characters long. It is not possible to specify ordering for results so clients should not rely on any specific ordering as that may change in the future releases of the API.
      operationId: searchClans
      parameters:
      - name: name
        in: query
        description: |
          Search clans by name. If name is used as part of search query, it needs to be at least three characters long. Name search parameter is interpreted as wild card search, so it may appear anywhere in the clan name.
        schema:
          type: string
      - name: warFrequency
        in: query
        description: Filter by clan war frequency
        schema:
          type: string
      - name: locationId
        in: query
        description: |
          Filter by clan location identifier. For list of available locations, refer to getLocations operation.
        schema:
          type: integer
      - name: minMembers
        in: query
        description: Filter by minimum number of clan members
        schema:
          type: integer
      - name: maxMembers
        in: query
        description: Filter by maximum number of clan members
        schema:
          type: integer
      - name: minClanPoints
        in: query
        description: Filter by minimum amount of clan points.
        schema:
          type: integer
      - name: minClanLevel
        in: query
        description: Filter by minimum clan level.
        schema:
          type: integer
      - name: limit
        in: query
        description: Limit the number of items returned in the response.
        schema:
          type: integer
      - name: after
        in: query
        description: |
          Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      - name: before
        in: query
        description: |
          Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      - name: labelIds
        in: query
        description: Comma separatered list of label IDs to use for filtering results.
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClanList'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /warleagues:
    get:
      tags:
      - leagues
      summary: List war leagues
      description: List war leagues
      operationId: getWarLeagues
      parameters:
      - name: limit
        in: query
        description: Limit the number of items returned in the response.
        schema:
          type: integer
      - name: after
        in: query
        description: |
          Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      - name: before
        in: query
        description: |
          Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
        schema:
          type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarLeagueList'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /api/login:
    servers:
      - url: https://developer.clashofclans.com/api/login
    post:
      security: []
      tags:
      - developer
      summary: Login to the developer portal.
      operationId: login
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
        required: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /apikey/list:
    servers:
      - url: https://developer.clashofclans.com/api/apikey/list
    post:
      security:
        - cookieAuth: []
      tags:
      - developer
      summary: List all tokens.
      operationId: keys
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyList'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /apikey/revoke:
    servers:
      - url: https://developer.clashofclans.com/api/apikey/revoke
    post:
      security:
        - cookieAuth: []
      tags:
      - developer
      summary: Revoke an api token.
      operationId: revoke
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Key'
        required: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyInstance'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
  /apikey/create:
    servers:
      - url: https://developer.clashofclans.com/api/apikey/create
    post:
      security:
        - cookieAuth: []
      tags:
      - developer
      summary: Create an api token.
      operationId: create
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenRequest'
        required: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyInstance'
        400:
          $ref: '#/components/responses/BadRequestSpec'
        403:
          $ref: '#/components/responses/ForbiddenSpec'
        404:
          $ref: '#/components/responses/NotFoundSpec'
        429:
          $ref: '#/components/responses/RequestThrottledSpec'
        500:
          $ref: '#/components/responses/UnknownExceptionSpec'
        503:
          $ref: '#/components/responses/InMaintenanceSpec'
components:
  schemas:
    BadgeUrls:
      required:
      - large
      - medium
      - small
      type: object
      properties:
        small:
          type: string
          readOnly: true
        medium:
          type: string
          readOnly: true
        large:
          type: string
          readOnly: true
    GroupState:
      type: string
      enum:
      - preparation
      - inWar
      - ended
    IconUrls:
      type: object
      properties:
        small:
          type: string
          readOnly: true
        medium:
          type: string
          readOnly: true
        tiny:
          type: string
          readOnly: true
    RecruitingType:
      type: string
      enum:
      - inviteOnly
      - closed
      - open
    Role:
      type: string
      enum:
      - member
      - admin
      - coLeader
      - leader
    Result:
      type: string
      enum:
      - lose
      - tie
      - win
    VillageType:
      type: string
      enum:
      - home
      - builderBase
      - clanCapital
    WarFrequency:
      type: string
      enum:
      - unknown
      - never
      - lessThanOncePerWeek
      - oncePerWeek
      - moreThanOncePerWeek
      - always
      - any
    WarPreference:
      type: string
      enum:
      - out
      - in
    WarState:
      type: string
      enum:
      - notInWar
      - preparation
      - inWar
      - warEnded
    WarType:
      type: string
      enum:
      - unknown
      - random
      - friendly
      - sccwl
    WarLeagueList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/WarLeague'
          readOnly: true
      required:
        - items
    WarLeague:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/JsonLocalizedName'
          readOnly: true
        id:
          type: integer
          readOnly: true
      required:
      - id
      - name
    JsonLocalizedName:
      type: string
      readOnly: true
    ClanList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ClanListEntry'
          readOnly: true
      required:
      - items
    ClanListEntry:
      type: object
      properties:
        warLeague:
          allOf:
          - $ref: '#/components/schemas/WarLeague'
          readOnly: true
        requiredTrophies:
          type: integer
          readOnly: true
        clanBuilderBasePoints:
          type: integer
          readOnly: true
        tag:
          type: string
          readOnly: true
        isWarLogPublic:
          type: boolean
          readOnly: true
        warFrequency:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/WarFrequency'
        clanLevel:
          type: integer
          readOnly: true
        warWinStreak:
          type: integer
          readOnly: true
        warWins:
          type: integer
          readOnly: true
        warTies:
          type: integer
          readOnly: true
        warLosses:
          type: integer
          readOnly: true
        clanPoints:
          type: integer
          readOnly: true
        chatLanguage:
          allOf:
          - $ref: '#/components/schemas/Language'
          readOnly: true
        labels:
          allOf:
          - $ref: '#/components/schemas/LabelList'
          readOnly: true
        name:
          type: string
          readOnly: true
        location:
          allOf:
          - $ref: '#/components/schemas/Location'
          readOnly: true
        type:
          allOf:
          - $ref: '#/components/schemas/RecruitingType'
          readOnly: true
        members:
          type: integer
          readOnly: true
        badgeUrls:
          allOf:
          - $ref: '#/components/schemas/BadgeUrls'
          readOnly: true
      required:
      - badgeUrls
      - clanBuilderBasePoints
      - clanLevel
      - clanPoints
      - isWarLogPublic
      - labels
      - members
      - name
      - requiredTrophies
      - tag
      - warLeague
      - warWinStreak
      - warWins
    Clan:
      type: object
      properties:
        warLeague:
          allOf:
          - $ref: '#/components/schemas/WarLeague'
          readOnly: true
        memberList:
          allOf:
          - $ref: '#/components/schemas/ClanMemberList'
          readOnly: true
        requiredTrophies:
          type: integer
          readOnly: true
        requiredBuilderBaseTrophies:
          type: integer
          readOnly: true
        clanBuilderBasePoints:
          type: integer
          readOnly: true
        tag:
          type: string
          readOnly: true
        isWarLogPublic:
          type: boolean
          readOnly: true
        warFrequency:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/WarFrequency'
        clanLevel:
          type: integer
          readOnly: true
        warWinStreak:
          type: integer
          readOnly: true
        warWins:
          type: integer
          readOnly: true
        warTies:
          type: integer
          readOnly: true
        warLosses:
          type: integer
          readOnly: true
        clanPoints:
          type: integer
          readOnly: true
        chatLanguage:
          allOf:
          - $ref: '#/components/schemas/Language'
          readOnly: true
        labels:
          allOf:
          - $ref: '#/components/schemas/LabelList'
          readOnly: true
        name:
          type: string
          readOnly: true
        location:
          allOf:
          - $ref: '#/components/schemas/Location'
          readOnly: true
        type:
          allOf:
          - $ref: '#/components/schemas/RecruitingType'
          readOnly: true
        members:
          type: integer
          readOnly: true
        description:
          type: string
          readOnly: true
        clanCapital:
          allOf:
          - $ref: '#/components/schemas/ClanCapital'
          readOnly: true
        badgeUrls:
          allOf:
          - $ref: '#/components/schemas/BadgeUrls'
          readOnly: true
        capitalLeague:
          allOf:
          - $ref: '#/components/schemas/CapitalLeague'
          readOnly: true
        isFamilyFriendly:
          type: boolean
          readOnly: true
      required:
        - badgeUrls
        - capitalLeague
        - clanBuilderBasePoints
        - clanCapital
        - clanLevel
        - clanPoints
        - description
        - isFamilyFriendly
        - isWarLogPublic
        - labels
        - memberList
        - members
        - name
        - requiredBuilderBaseTrophies
        - requiredTrophies
        - tag
        - warLeague
        - warWinStreak
        - warWins
    CapitalLeague:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/JsonLocalizedName'
          readOnly: true
        id:
          type: integer
          readOnly: true
      required:
        - name
        - id
    CapitalLeagueObject:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CapitalLeague'
          readOnly: true
      required:
        - items
    ClanCapital:
      type: object
      properties:
        capitalHallLevel:
          type: integer
          readOnly: true
        districts:
          allOf:
          - $ref: '#/components/schemas/ClanDistrictDataList'
          readOnly: true
    ClanCapitalRaidSeasons:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ClanCapitalRaidSeason'
          readOnly: true
      required:
      - items
    ClanCapitalRaidSeason:
      type: object
      properties:
        attackLog:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ClanCapitalRaidSeasonAttackLogList'
        defenseLog:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ClanCapitalRaidSeasonDefenseLogList'
        state:
          type: string
          readOnly: true
          enum:
          - unknown
          - ongoing
          - ended
        startTime:
          type: string
          format: date-time
          readOnly: true
        endTime:
          type: string
          format: date-time
          readOnly: true
        capitalTotalLoot:
          type: integer
          readOnly: true
        raidsCompleted:
          type: integer
          readOnly: true
        totalAttacks:
          type: integer
          readOnly: true
        enemyDistrictsDestroyed:
          type: integer
          readOnly: true
        offensiveReward:
          type: integer
          readOnly: true
        defensiveReward:
          type: integer
          readOnly: true
        members:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ClanCapitalRaidSeasonMemberList'
      required:
      - attackLog
      - capitalTotalLoot
      - defenseLog
      - defensiveReward
      - endTime
      - enemyDistrictsDestroyed
      - offensiveReward
      - raidsCompleted
      - startTime
      - state
      - totalAttacks
    ClanCapitalRaidSeasonMemberList:
      type: array
      items:
        $ref: '#/components/schemas/ClanCapitalRaidSeasonMember'
    ClanCapitalRaidSeasonMember:
      type: object
      properties:
        tag:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
        attacks:
          type: integer
          readOnly: true
        attackLimit:
          type: integer
          readOnly: true
        bonusAttackLimit:
          type: integer
          readOnly: true
        capitalResourcesLooted:
          type: integer
          readOnly: true
      required:
      - attackLimit
      - attacks
      - bonusAttackLimit
      - capitalResourcesLooted
      - name
      - tag
    ClanCapitalRaidSeasonDefenseLogList:
      type: array
      items:
        $ref: '#/components/schemas/ClanCapitalRaidSeasonDefenseLogEntry'
    ClanCapitalRaidSeasonDefenseLogEntry:
      type: object
      properties:
        attacker:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ClanCapitalRaidSeasonClanInfo'
        attackCount:
          type: integer
          readOnly: true
        districtCount:
          type: integer
          readOnly: true
        districtsDestroyed:
          type: integer
          readOnly: true
        districts:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ClanCapitalRaidSeasonDistrictList'
      required:
      - attackCount
      - attacker
      - districtCount
      - districts
      - districtsDestroyed
    ClanCapitalRaidSeasonDistrictList:
      type: array
      items:
        $ref: '#/components/schemas/ClanCapitalRaidSeasonDistrict'
    ClanCapitalRaidSeasonDistrict:
      type: object
      properties:
        stars:
          type: integer
          readOnly: true
        name:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/JsonLocalizedName'
        id:
          type: integer
          readOnly: true
        destructionPercent:
          type: integer
          readOnly: true
        attackCount:
          type: integer
          readOnly: true
        totalLooted:
          type: integer
          readOnly: true
        attacks:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ClanCapitalRaidSeasonAttackList'
        districtHallLevel:
          type: integer
          readOnly: true
      required:
      - attackCount
      - destructionPercent
      - districtHallLevel
      - id
      - name
      - stars
      - totalLooted
    ClanCapitalRaidSeasonAttackList:
      type: array
      items:
        $ref: '#/components/schemas/ClanCapitalRaidSeasonAttack'
    ClanCapitalRankingObject:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ClanCapitalRankingList'
          readOnly: true
      required:
      - items
    ClanCapitalRankingList:
      type: array
      items:
        $ref: '#/components/schemas/ClanCapitalRanking'
    ClanCapitalRanking:
      type: object
      properties:
        clanCapitalPoints:
          type: integer
          readOnly: true
        tag:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
        location:
          allOf:
          - $ref: '#/components/schemas/Location'
          readOnly: true
        badgeUrls:
          allOf:
          - $ref: '#/components/schemas/BadgeUrls'
          readOnly: true
        clanLevel:
          type: integer
          readOnly: true
        members:
          type: integer
          readOnly: true
        rank:
          type: integer
          readOnly: true
        previousRank:
          type: integer
          readOnly: true
      required:
      - badgeUrls
      - clanCapitalPoints
      - clanLevel
      - members
      - name
      - previousRank
      - rank
      - tag
    ClanCapitalRaidSeasonAttack:
      type: object
      properties:
        attacker:
          allOf:
            - $ref: '#/components/schemas/ClanCapitalRaidSeasonAttacker'
          readOnly: true
        destructionPercent:
          type: integer
          readOnly: true
        stars:
          type: integer
          readOnly: true
      required:
      - attacker
      - destructionPercent
      - stars
    ClanCapitalRaidSeasonAttacker:
      type: object
      properties:
        tag:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
      required:
      - name
      - tag
    ClanCapitalRaidSeasonClanInfo:
      type: object
      properties:
        tag:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
        level:
          type: integer
          readOnly: true
        badgeUrls:
          allOf:
          - $ref: '#/components/schemas/BadgeUrls'
          readOnly: true
      required:
      - badgeUrls
      - level
      - name
      - tag
    ClanCapitalRaidSeasonAttackLogList:
      type: array
      items:
        $ref: '#/components/schemas/ClanCapitalRaidSeasonAttackLogEntry'
    ClanCapitalRaidSeasonAttackLogEntry:
      type: object
      properties:
        defender:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ClanCapitalRaidSeasonClanInfo'
        attackCount:
          type: integer
          readOnly: true
        districtCount:
          type: integer
          readOnly: true
        districtsDestroyed:
          type: integer
          readOnly: true
        districts:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ClanCapitalRaidSeasonDistrictList'
      required:
      - attackCount
      - defender
      - districtCount
      - districts
      - districtsDestroyed
    ClanDistrictDataList:
      type: array
      items:
        $ref: '#/components/schemas/ClanDistrictData'
    ClanDistrictData:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/JsonLocalizedName'
          readOnly: true
        id:
          type: integer
          readOnly: true
        districtHallLevel:
          type: integer
          readOnly: true
      required:
      - districtHallLevel
      - id
      - name
    Language:
      type: object
      properties:
        name:
          type: string
          readOnly: true
        id:
          type: integer
          readOnly: true
        languageCode:
          type: string
          readOnly: true
      required:
      - id
      - languageCode
      - name
    Location:
      type: object
      properties:
        localizedName:
          type: string
          readOnly: true
        id:
          type: integer
          readOnly: true
        name:
          type: string
          readOnly: true
        isCountry:
          type: boolean
          readOnly: true
        countryCode:
          type: string
          readOnly: true
      required:
      - id
      - isCountry
      - name
    LabelsObject:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Label'
          readOnly: true
      required:
      - items
    LabelList:
      type: array
      items:
        $ref: '#/components/schemas/Label'
    Label:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/JsonLocalizedName'
          readOnly: true
        id:
          type: integer
          readOnly: true
        iconUrls:
          allOf:
          - $ref: '#/components/schemas/IconUrls'
          readOnly: true
      required:
      - iconUrls
      - id
      - name
    ClanMemberList:
      type: array
      items:
        $ref: '#/components/schemas/ClanMember'
    ClanMember:
      type: object
      properties:
        league:
          allOf:
          - $ref: '#/components/schemas/League'
          readOnly: true
        builderBaseLeague:
          allOf:
          - $ref: '#/components/schemas/BuilderBaseLeague'
          readOnly: true
        tag:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
        role:
          allOf:
          - $ref: '#/components/schemas/Role'
          readOnly: true
        expLevel:
          type: integer
          readOnly: true
        clanRank:
          type: integer
          readOnly: true
        previousClanRank:
          type: integer
          readOnly: true
        donations:
          type: integer
          readOnly: true
        donationsReceived:
          type: integer
          readOnly: true
        trophies:
          type: integer
          readOnly: true
        builderBaseTrophies:
          type: integer
          readOnly: true
        playerHouse:
          allOf:
          - $ref: '#/components/schemas/PlayerHouse'
          readOnly: true
      required:
      - builderBaseTrophies
      - clanRank
      - donations
      - donationsReceived
      - expLevel
      - league
      - name
      - previousClanRank
      - tag
      - trophies
    PlayerHouse:
      type: object
      properties:
        elements:
          allOf:
          - $ref: '#/components/schemas/PlayerHouseElementList'
          readOnly: true
      required:
      - elements
    PlayerHouseElementList:
      type: array
      items:
        $ref: '#/components/schemas/PlayerHouseElement'
    PlayerHouseElement:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        type:
          type: string
          readOnly: true
          enum:
            - unknown
            - ground
            - roof
            - foot
            - decoration
            - walls
      required:
      - id
      - type
    BuilderBaseLeague:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/JsonLocalizedName'
          readOnly: true
        id:
          type: integer
          readOnly: true
      required:
      - name
      - id
    League:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/JsonLocalizedName'
          readOnly: true
        id:
          type: integer
          readOnly: true
        iconUrls:
          allOf:
          - $ref: '#/components/schemas/IconUrls'
          readOnly: true
      required:
      - iconUrls
      - id
      - name
    ClanBuilderBaseRankingList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ClanBuilderBaseRanking'
          readOnly: true
      required:
      - items
    ClanBuilderBaseRanking:
      type: object
      properties:
        clanBuilderBasePoints:
          type: integer
          readOnly: true
      required:
      - clanBuilderBasePoints
    PlayerRankingList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PlayerRanking'
          readOnly: true
      required:
      - items
    PlayerRanking:
      type: object
      properties:
        clan:
          allOf:
          - $ref: '#/components/schemas/PlayerRankingClan'
          readOnly: true
        league:
          allOf:
          - $ref: '#/components/schemas/League'
          readOnly: true
        attackWins:
          type: integer
          readOnly: true
        defenseWins:
          type: integer
          readOnly: true
        tag:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
        expLevel:
          type: integer
          readOnly: true
        rank:
          type: integer
          readOnly: true
        previousRank:
          type: integer
          readOnly: true
        trophies:
          type: integer
          readOnly: true
      required:
      - attackWins
      - defenseWins
      - expLevel
      - league
      - name
      - previousRank
      - rank
      - tag
      - trophies
    PlayerRankingClan:
      type: object
      properties:
        tag:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
        badgeUrls:
          allOf:
          - $ref: '#/components/schemas/BadgeUrls'
          readOnly: true
      required:
      - badgeUrls
      - name
      - tag
    LocationList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Location'
          readOnly: true
      required:
      - items
    LeagueSeasonList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/LeagueSeason'
          readOnly: true
      required:
        - items
    LeagueSeason:
      type: object
      properties:
        id:
          type: string
          readOnly: true
      required:
      - id
    LeagueList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/League'
          readOnly: true
      required:
      - items
    ClanWarLog:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ClanWarLogEntry'
          readOnly: true
      required:
      - items
    ClanWarLogEntry:
      type: object
      properties:
        clan:
          allOf:
          - $ref: '#/components/schemas/WarClanLogEntry'
          readOnly: true
        teamSize:
          type: integer
          readOnly: true
        attacksPerMember:
          type: integer
          readOnly: true
        opponent:
          allOf:
          - $ref: '#/components/schemas/WarClanLogEntry'
          readOnly: true
        endTime:
          type: string
          format: date-time
          readOnly: true
        result:
          allOf:
          - $ref: '#/components/schemas/Result'
          readOnly: true
      required:
      - clan
      - endTime
      - opponent
      - teamSize
    GoldPassSeason:
      type: object
      properties:
        startTime:
          type: string
          readOnly: true
        endTime:
          type: string
          readOnly: true
      required:
      - endTime
      - startTime
    WarClanLogEntry:
      type: object
      properties:
        destructionPercentage:
          type: number
          format: float
          readOnly: true
        tag:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
        badgeUrls:
          allOf:
          - $ref: '#/components/schemas/BadgeUrls'
          readOnly: true
        clanLevel:
          type: integer
          readOnly: true
        attacks:
          type: integer
          readOnly: true
        stars:
          type: integer
          readOnly: true
        expEarned:
          type: integer
          readOnly: true
      required:
      - badgeUrls
      - clanLevel
      - destructionPercentage
      - stars
    WarClan:
      type: object
      properties:
        destructionPercentage:
          type: number
          format: float
          readOnly: true
        tag:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
        badgeUrls:
          allOf:
          - $ref: '#/components/schemas/BadgeUrls'
          readOnly: true
        clanLevel:
          type: integer
          readOnly: true
        attacks:
          type: integer
          readOnly: true
        stars:
          type: integer
          readOnly: true
        expEarned:
          type: integer
          readOnly: true
        members:
          $ref: '#/components/schemas/ClanWarMemberList'
          readOnly: true
      required:
        - attacks
        - badgeUrls
        - clanLevel
        - destructionPercentage
        - members
        - name
        - stars
        - tag
    ClanWarMemberList:
      type: array
      items:
        $ref: '#/components/schemas/ClanWarMember'
      readOnly: true
    ClanWarMember:
      type: object
      properties:
        tag:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
        mapPosition:
          type: integer
          readOnly: true
        townhallLevel:
          type: integer
          readOnly: true
        opponentAttacks:
          type: integer
          readOnly: true
        bestOpponentAttack:
          allOf:
          - $ref: '#/components/schemas/ClanWarAttack'
          readOnly: true
        attacks:
          allOf:
          - $ref: '#/components/schemas/ClanWarAttackList'
          readOnly: true
      required:
      - mapPosition
      - name
      - opponentAttacks
      - tag
      - townhallLevel
    ClanWarAttackList:
      type: array
      items:
        $ref: '#/components/schemas/ClanWarAttack'
      readOnly: true
    ClanWarAttack:
      type: object
      properties:
        order:
          type: integer
          readOnly: true
        attackerTag:
          type: string
          readOnly: true
        defenderTag:
          type: string
          readOnly: true
        stars:
          type: integer
          readOnly: true
        destructionPercentage:
          type: integer
          format: float
          readOnly: true
        duration:
          type: integer
          readOnly: true
      required:
      - attackerTag
      - defenderTag
      - destructionPercentage
      - order
      - stars
    ClanWarLeagueGroup:
      type: object
      properties:
        state:
          allOf:
          - $ref: '#/components/schemas/GroupState'
          readOnly: true
        season:
          type: string
          format: date
          example: 2023-01
          readOnly: true
        clans:
          $ref: '#/components/schemas/ClanWarLeagueClanList'
          readOnly: true
        rounds:
          $ref: '#/components/schemas/ClanWarLeagueRoundList'
          readOnly: true
      required:
      - clans
      - rounds
      - season
    ClanWarLeagueRoundList:
      type: array
      items:
        $ref: '#/components/schemas/ClanWarLeagueRound'
      readOnly: true
    ClanWarLeagueRound:
      type: object
      properties:
        warTags:
          $ref: '#/components/schemas/StringList'
          readOnly: true
      required:
      - warTags
    StringList:
      type: array
      items:
        type: string
      readOnly: true
    String:
      type: object
      readOnly: true
    ClanWarLeagueClanList:
      type: array
      items:
        $ref: '#/components/schemas/ClanWarLeagueClan'
      readOnly: true
    ClanWarLeagueClan:
      type: object
      properties:
        tag:
          readOnly: true
          type: string
        clanLevel:
          readOnly: true
          type: integer
        name:
          readOnly: true
          type: string
        members:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/ClanWarLeagueClanMember'
        badgeUrls:
          allOf:
          - $ref: '#/components/schemas/BadgeUrls'
          readOnly: true
      required:
      - badgeUrls
      - clanLevel
      - members
      - name
      - tag
    ClanWarLeagueClanMember:
      type: object
      properties:
        tag:
          readOnly: true
          type: string
        townHallLevel:
          readOnly: true
          type: integer
        name:
          readOnly: true
          type: string
      required:
      - name
      - tag
      - townHallLevel
    ClanRankingList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ClanRanking'
          readOnly: true
      required:
      - items
    ClanRanking:
      type: object
      properties:
        clanLevel:
          type: integer
          readOnly: true
        clanPoints:
          type: integer
          readOnly: true
        location:
          allOf:
          - $ref: '#/components/schemas/Location'
          readOnly: true
        members:
          type: integer
          readOnly: true
        tag:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
        rank:
          type: integer
          readOnly: true
        previousRank:
          type: integer
          readOnly: true
        badgeUrls:
          allOf:
          - $ref: '#/components/schemas/BadgeUrls'
          readOnly: true
      required:
      - badgeUrls
      - clanLevel
      - clanPoints
      - members
      - name
      - previousRank
      - rank
      - tag
    BuilderBaseLeagueList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/BuilderBaseLeague'
          readOnly: true
      required:
        - items
    PlayerBuilderBaseRankingList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PlayerBuilderBaseRanking'
          readOnly: true
      required:
      - items
    PlayerBuilderBaseRanking:
      type: object
      properties:
        builderBaseLeague:
          allOf:
          - $ref: '#/components/schemas/BuilderBaseLeague'
          readOnly: true
        clan:
          allOf:
          - $ref: '#/components/schemas/PlayerRankingClan'
          readOnly: true
        tag:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
        expLevel:
          type: integer
          readOnly: true
        rank:
          type: integer
          readOnly: true
        previousRank:
          type: integer
          readOnly: true
        builderBaseTrophies:
          type: integer
          readOnly: true
      required:
      - builderBaseLeague
      - builderBaseTrophies
      - expLevel
      - name
      - previousRank
      - rank
      - tag
    Player:
      type: object
      properties:
        clan:
          allOf:
          - $ref: '#/components/schemas/PlayerClan'
          readOnly: true
        league:
          allOf:
          - $ref: '#/components/schemas/League'
          readOnly: true
        builderBaseLeague:
          allOf:
          - $ref: '#/components/schemas/BuilderBaseLeague'
          readOnly: true
        role:
          allOf:
          - $ref: '#/components/schemas/Role'
          readOnly: true
        warPreference:
          allOf:
          - $ref: '#/components/schemas/WarPreference'
          readOnly: true
        attackWins:
          type: integer
          readOnly: true
        defenseWins:
          type: integer
          readOnly: true
        townHallLevel:
          type: integer
          readOnly: true
        townHallWeaponLevel:
          type: integer
          readOnly: true
        legendStatistics:
          allOf:
          - $ref: '#/components/schemas/PlayerLegendStatistics'
          readOnly: true
        troops:
          allOf:
          - $ref: '#/components/schemas/PlayerItemLevelList'
          readOnly: true
        heroes:
          allOf:
          - $ref: '#/components/schemas/PlayerItemLevelList'
          readOnly: true
        spells:
          allOf:
          - $ref: '#/components/schemas/PlayerItemLevelList'
          readOnly: true
        labels:
          allOf:
          - $ref: '#/components/schemas/LabelList'
          readOnly: true
        tag:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
        expLevel:
          type: integer
          readOnly: true
        trophies:
          type: integer
          readOnly: true
        bestTrophies:
          type: integer
          readOnly: true
        donations:
          type: integer
          readOnly: true
        donationsReceived:
          type: integer
          readOnly: true
        builderHallLevel:
          type: integer
          readOnly: true
        builderBaseTrophies:
          type: integer
          readOnly: true
        bestVersusTrophies:
          type: integer
          readOnly: true
        warStars:
          type: integer
          readOnly: true
        achievements:
          allOf:
          - $ref: '#/components/schemas/PlayerAchievementProgressList'
          readOnly: true
        clanCapitalContributions:
          type: integer
          readOnly: true
        versusBattleWinCount:
          type: integer
          readOnly: true
        playerHouse:
          allOf:
          - $ref: '#/components/schemas/PlayerHouse'
          readOnly: true
      required:
      - achievements
      - attackWins
      - bestTrophies
      - bestVersusSeason
      - builderBaseTrophies
      - clanCapitalContributions
      - defenseWins
      - donations
      - donationsReceived
      - expLevel
      - heroes
      - labels
      - name
      - spells
      - tag
      - townHallLevel
      - troops
      - trophies
      - warStars
      - bestVersusTrophies
    PlayerAchievementProgressList:
      type: array
      items:
        $ref: '#/components/schemas/PlayerAchievementProgress'
        readOnly: true
    PlayerAchievementProgress:
      type: object
      properties:
        stars:
          type: integer
          readOnly: true
        value:
          type: integer
          readOnly: true
        name:
          $ref: '#/components/schemas/JsonLocalizedName'
          readOnly: true
        target:
          type: integer
          readOnly: true
        info:
          $ref: '#/components/schemas/JsonLocalizedName'
          readOnly: true
        completionInfo:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/JsonLocalizedName'
          readOnly: true
        village:
          type: string
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/VillageType'
      required:
      - completionInfo
      - info
      - name
      - stars
      - target
      - value
      - village
    PlayerItemLevelList:
      type: array
      items:
        $ref: '#/components/schemas/PlayerItemLevel'
        readOnly: true
    PlayerItemLevel:
      type: object
      properties:
        level:
          type: integer
          readOnly: true
        name:
          $ref: '#/components/schemas/JsonLocalizedName'
          readOnly: true
        maxLevel:
          type: integer
          readOnly: true
        village:
          type: string
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/VillageType'
        superTroopIsActive:
          type: boolean
          readOnly: true
      required:
        - level
        - maxLevel
        - name
        - village
    PlayerLegendStatistics:
      type: object
      properties:
        currentSeason:
          allOf:
          - $ref: '#/components/schemas/LegendLeagueTournamentSeasonResult'
          readOnly: true
        previousBuilderBaseSeason:
          allOf:
          - $ref: '#/components/schemas/LegendLeagueTournamentSeasonResult'
          readOnly: true
        bestBuilderBaseSeason:
          allOf:
          - $ref: '#/components/schemas/LegendLeagueTournamentSeasonResult'
          readOnly: true
        legendTrophies:
          type: integer
          readOnly: true
        previousSeason:
          allOf:
          - $ref: '#/components/schemas/LegendLeagueTournamentSeasonResult'
          readOnly: true
        bestSeason:
          allOf:
          - $ref: '#/components/schemas/LegendLeagueTournamentSeasonResult'
          readOnly: true
      required:
      - currentSeason
      - legendTrophies
    LegendLeagueTournamentSeasonResult:
      type: object
      properties:
        trophies:
          type: integer
          readOnly: true
        id:
          type: string
          format: date
          example: 2023-01
          readOnly: true
        rank:
          type: integer
          readOnly: true
      required:
      - trophies
    PlayerClan:
      type: object
      properties:
        tag:
          type: string
          readOnly: true
        clanLevel:
          type: integer
          readOnly: true
        name:
          type: string
          readOnly: true
        badgeUrls:
          allOf:
          - $ref: '#/components/schemas/BadgeUrls'
          readOnly: true
      required:
      - badgeUrls
      - clanLevel
      - name
      - tag
    VerifyTokenRequest:
      type: object
      properties:
        token:
          type: string
      required:
      - token
    VerifyTokenResponse:
      type: object
      properties:
        tag:
          type: string
          readOnly: true
        token:
          type: string
          readOnly: true
        status:
          type: string
          readOnly: true
      required:
      - status
      - tag
      - token
    LoginCredentials:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    LoginResponse:
      type: object
      properties:
        temporaryAPIToken:
          type: string
        sessionExpiresInSeconds:
          type: integer
      required:
        - sessionExpiresInSeconds
        - temporaryAPIToken
    KeyList:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: integer
            message:
              type: string
            detail:
              type: string
          required:
            - code
            - message
        sessionExpiresInSeconds:
          type: integer
        keys:
          type: array
          items:
            $ref: '#/components/schemas/Key'
      required:
      - keys
      - sessionExpiresInSeconds
      - status
    KeyInstance:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: integer
            message:
              type: string
            detail:
              type: string
              nullable: true
        sessionExpiresInSeconds:
          type: integer
        key:
          allOf:
          - $ref: '#/components/schemas/Key'
      required:
      - sessionExpiresInSeconds
      - status
    Key:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        key:
          type: string
        developerId:
          type: string
        tier:
          type: string
        description:
          type: string
        origins:
          type: string
          nullable: true
        scopes:
          type: array
          items:
            type: string
        validUntil:
          type: string
          format: date-time
        cidrRanges:
          type: array
          items:
            type: string
      required:
      - cidrRanges
      - description
      - developerId
      - key
      - name
      - scopes
      - tier
      - id
    CreateTokenRequest:
      type: object
      properties:
        cidrRanges:
          type: array
          items:
            type: string
        name:
          type: string
        description:
          type: string
      required:
      - cidrRanges
      - description
      - name
    ClanWar:
      type: object
      properties:
        clan:
          allOf:
          - $ref: '#/components/schemas/WarClan'
          readOnly: true
        teamSize:
          type: integer
          readOnly: true
        attacksPerMember:
          type: integer
          readOnly: true
        opponent:
          allOf:
          - $ref: '#/components/schemas/WarClan'
          readOnly: true
        startTime:
          type: string
          format: date-time
          readOnly: true
        state:
          allOf:
          - $ref: '#/components/schemas/WarState'
          readOnly: true
        endTime:
          type: string
          format: date-time
          readOnly: true
        preparationStartTime:
          type: string
          format: date-time
          readOnly: true
      required:
      - attacksPerMember
      - clan
      - endTime
      - opponent
      - preparationStartTime
      - startTime
      - teamSize
    ClientError:
      type: object
      properties:
        reason:
          type: string
          readOnly: true
        message:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
        detail:
          type: object
          properties: {}
          readOnly: true
      required:
      - reason
  responses:
    BadRequestSpec:
      description: Client provided incorrect parameters for the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientError'
    ForbiddenSpec:
      description: |
        Access denied, either because of missing/incorrect credentials or used API token does not grant access to the requested resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientError'
    InMaintenanceSpec:
      description: Service is temprorarily unavailable because of maintenance.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientError'
    NotFoundSpec:
      description: Resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientError'
    RequestThrottledSpec:
      description: |
        Request was throttled, because amount of requests was above the threshold defined for the used API token.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientError'
    UnknownExceptionSpec:
      description: Unknown error happened when handling the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientError'
  securitySchemes:
    JWT:
      type: apiKey
      description: JSON Web Token used as an API key
      name: authorization
      in: header
    cookieAuth:
      type: apiKey
      in: cookie
      name: session